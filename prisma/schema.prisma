datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Cluster {
    id           Int       @id @default(autoincrement())
    createdAt    DateTime  @default(now())
    name         String    @db.VarChar(255)
    host         String
    port         String
    username     String
    password     String
    type         String
    workspace_id Int       @map("workspace_id")
    workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

    @@map("clusters")
}

model Commit {
    id         Int      @id @default(autoincrement())
    title      String
    createdAt  DateTime @default(now())
    executedAt DateTime
    clusterId  String
    databaseId String
    queryIds   String[]

    @@map("commits")
}

model Query {
    id         Int      @id @default(autoincrement())
    query      String   @db.Text
    tableId    String
    createdAt  DateTime @default(now())
    executedAt DateTime

    @@map("queries")
}

model View {
    id         Int      @id @default(autoincrement())
    title      String
    createdAt  DateTime @default(now())
    clusterId  String
    databaseId String
    query      String

    @@map("dataviews")
}

model Workspace {
    id            Int             @id @default(autoincrement())
    name          String          @db.VarChar(255)
    createdAt     DateTime        @default(now())
    Cluster       Cluster[]
    WorkspaceUser WorkspaceUser[]

    @@map("workspaces")
}

// WorkspaceUser model
model WorkspaceUser {
    workspace_id Int       @map("workspace_id")
    user_id      String    @map("user_id")
    role_id      String
    createdAt    DateTime  @default(now())
    role         Role      @relation(fields: [role_id], references: [id])
    user         User      @relation(fields: [user_id], references: [id])
    workspace    Workspace @relation(fields: [workspace_id], references: [id])

    @@unique([workspace_id, user_id])
    @@map("workspaceusers")
}

// Role model
model Role {
    id              String            @id @db.VarChar(255)
    label           String?
    createdAt       DateTime          @default(now())
    WorkspaceUser   WorkspaceUser[]
    RolePermissions RolePermissions[]

    @@map("roles")
}

// Permission model
model Permission {
    id              String            @id @db.VarChar(255)
    label           String?
    createdAt       DateTime          @default(now())
    RolePermissions RolePermissions[]

    @@map("permissions")
}

// RolePermissions model
model RolePermissions {
    roleId       String     @map("role_id")
    permissionId String     @map("permission_id")
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@unique([roleId, permissionId])
    @@map("role_permissions")
}

// Auth models
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?       @map("email_verified")
    image         String?
    username      String?
    accounts      Account[]
    sessions      Session[]
    WorkspaceUser WorkspaceUser[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
