datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Cluster {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    name      String   @db.VarChar(255)
    host      String
    port      String
    username  String
    password  String
    type      String
}

model Query {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    exectedAt  DateTime
    clusterId  String
    databaseId String
    tableId    String
    sqlQuery   String
}

model Workspaces {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar(255)
    createdAt DateTime @default(now())

    @@map("workspaces")
}

model Roles {
    id        String   @id @db.VarChar(255)
    createdAt DateTime @default(now())

    @@map("roles")
}

model RolePermissions {
    roleId       String @map("role_id")
    permissionId String @map("permission_id")

    @@unique([roleId, permissionId])
}

model Permissions {
    id        String   @id @db.VarChar(255)
    createdAt DateTime @default(now())

    @@map("permissions")
}

model UserRoles {
    userId      String @map("user_id")
    roleId      String @map("role_id")
    workspaceId String @map("workspace_id")

    @@unique([userId, roleId, workspaceId])
}

// Auth models
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
